doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Swimming in the MicroServices Ocean

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section(data-bespoke-backdrop='ocean').trans
        div(style='text-align: left; margin-top: -2em; color: white')
          h1 Swimming in the MicroServices Ocean
          h3(style='color: white') by&nbsp;
            a(style="display:inline-block;margin-left: -.03em; color: white",href="http://twitter.com/matteocollina") @matteocollina

          br
          div(style="width: 50%; float: right; margin-bottom: -30em;")
            a(href="http://nearform.com")
              img(src="./images/nearform.svg")

      section(data-bespoke-backdrop='ocean').transwhite
        img(src="images/codemotion.png" style="width: 90%")

      section(data-bespoke-backdrop='onceuponatime').trans

      section(data-bespoke-backdrop='monolith2').trans

      section()
        // h2 Stateless Architecture
        img(src='images/arch-generic.png' style='height: 90%')

      section
        h2 How do you scale beyond one machine?

      section()
        h3 Round-Robin Load Balancing
        img(src='images/loadbalacing.png' style='width: 90%')

      section
        h3 Round-Robin Load Balancing
        img(src="./images/no-caching.png", style="width: 120%")

      section
        h2 Any local state is unfeasible
          br
          | as the load is shared

      section
        h2 Divide et Impera
        h3 (Philip of Macedonia)

      section
        h2 Microservices

      section()
        img(src='images/microservices.png' style='height: 90%')

      section(data-bespoke-backdrop='hipster').trans

      section
        h2 Are stateless microservices resilient?

      section
        h2 Is there an alternative?

      section
        h3 Application-Level Sharding
        img(src="./images/reqhashing.png" style="width: 90%")
        // Given a request referencing data X, we must always route it to peer Y.

      section
        h3 How do we assign users to servers?
        img(src='images/sharding.png' style='height: 80%')

      section
        h2 What if the topology changes?

      section(data-bespoke-backdrop='books').transgray
        h2(style="color: white") Service Discovery

      section
        img(src="./images/consul.png" style="width: 90%")

      section
        img(src="./images/etcd.svg" style="width: 90%")

      section
        h2 Do we really need another piece of infrastructure?

      section
        h2 Failure detection
        img(src="./images/heartbeat.png" style="width: 90%")
        h2 by heartbeat

      section()
        img(src='images/serf.png' style='height: 90%')
        h2 But it's still more software runnning..

      section
        img(src="./images/unfeasible.gif")

      section
        h2 ..or is it?

      section()
        img(src='images/upring.svg' style='width: 90%')

      section
        h2 DEMO
        a(href="https://github.com/mcollina/upring-demos") https://github.com/mcollina/upring-demos
        a(href="https://youtu.be/fLDOCwiKbbo") https://youtu.be/fLDOCwiKbbo

      section(data-bespoke-backdrop='magic').trans

      section
        h3 What happens when you read on UpRing?
        img(src="./images/read.png" style="height: 90%")

      section
        h3 What happens when you write on UpRing?
        img(src="./images/write.png" style="height: 90%")

      section
        h3 What happens when a peer dies?
        img(src="./images/peer-dead.png" style="height: 90%")

      section(data-bespoke-backdrop='dragon-scroll').trans
        h1(style="color: white; padding-top: 50%") Secret Sauce(s)

      section()
        img(src='images/dynamodb.png' style='width: 90%')

      section
        img(src="./images/dynamo-strategy-one.png" style="height: 90%")

      section()
        img(src='images/swim.png' style='width: 90%')

      section
        ul(style='text-align: left; font-size: 3em').bullet
          li
            b(style='color: red; font-style: italic;') S
            | calable
          li
            b(style='color: red; font-style: italic;') W
            | eakly-Consistent
          li
            b(style='color: red; font-style: italic;') I
            | nfection Style
          li
            b(style='color: red; font-style: italic;') M
            | embership protocol

      section(data-bespoke-backdrop='lamp').trans
        h3(style="color: white; margin-left: auto; margin-right: 0%; width: 30%; text-align: right; padding-bottom: 5%")
          | Let's organize our peers in a <b>consistent hashring</b>,
          | using <b>SWIM</b> to detect failures

      section(data-bespoke-backdrop='magic').trans

      section()
        img(src='images/hashring-sharding.png' style='height: 90%')

      section
        h2 Differences between Raft and Paxos
        ul.bullet(style="text-align: left")
          li
            | in UpRing, a leader is staticially decided based on the key
            | so there are multiple leaders
          li in Raft and Paxos, there is a single leader, elected by all the
            | peers

      section
        h2 Differences between Raft and Paxos
        ul.bullet(style="text-align: left")
          li
            | in UpRing, the stability of the cluster depends on the gossip
            | convergence, every peer must know who else is available to hash
            | the key
          li
            | in Raft and Paxos, you need at least 3 nodes to operate,
            | but better use 5

      section(data-bespoke-backdrop='upring-events').trans

      section
        h2 API

      section
        h2 Starting upring
        pre
          code.language-javascript.
            const upring = UpRing({
              base: ['127.0.0.1:7979'],
              logLevel: 'debug',
              hashring: {
                replicaPoints: 10,
                joinTimeout: 200
              }
            })

      section
        h2 Adding patterns
        pre
          code.language-javascript.
            upring.add('ns:kv,cmd:put', function (req, reply) {
              db.set(req.key, req.value)
              /* the first argument is the error
                 the second one is the result */
              reply(null, { ok: true })
            })

      section
        h2 Send requests
        pre
          code.language-javascript.
            upring.request({
              ns: 'kv',
              cmd: 'get',
              key: 'hello'
            }, console.log)

      section
        h2 Do live updates 1/2
        pre
          code.language-javascript.
            upring.add('ns:kv,cmd:live', function (req, reply) {
              const updates = new Readable({
                objectMode: true,
                read: () => {}
              })
              // call push whenever you want to send data
              // se the full Readable API at nodejs.org
              updates.push({ hello: 'world' })
              reply(null, { streams: { updates } })
            })

      section
        h2 Do live updates 2/2
        pre
          code.language-javascript.
            upring.request({
              ns: 'kv',
              cmd: 'get',
              key: 'hello'
            }, function (err, res) {
              res.streams.updates.on('data', console.log)
            })

      section
        h2 Track
        pre
          code.language-javascript.
            /* call upring.track(key) if you are responsible
               for that key, i.e. if upring.allocatedToMe(key)
               returns true */
            const tracker = upring.track(key, { replica: true })
            tracker.on('replica', function (peer) {
              console.log('new replica', peer)
            })
            tracker.on('move', function (peer) {
              console.log('moved to', peer)
            })

      section
        h2 Replica
        pre
          code.language-javascript.
            /* call upring.replica(key, cb) if you are not responsible
               for that key, i.e. if upring.allocatedToMe(key)
               returns false */
            upring.replica(key, function () {
              // now upring.allocateToMe(key) returns true
            })

      section
        img(src='images/upring.svg' style='width: 30%')
        br
        br
        h2 Internals

      section
        h2 Transport: tentacoli
        ul.bullet
          li
            a(href="https://github.com/mcollina/tentacoli")
              | https://github.com/mcollina/tentacoli
          li request/response for messages
          li support sending binary streams
          li support sending object streams
          li works on top any binary stream
          li multiplexed

      section
        pre
          code.language-javascript.
            var stream = net.connect(4200)
            var instance = tentacoli()

            stream.pipe(instance).pipe(stream)

            instance.request({
              cmd: 'somedata'
            }, function (err, res) {
              console.log(err, res)
            })

      section
        pre
          code.language-javascript.
            var server = net.createServer(function (stream) {
              var instance = tentacoli()
              stream.pipe(instance).pipe(stream)
              stream.on('request', handle)
            })
            server.listen(4200)

      section
        pre
          code.language-javascript.
            function handle (req, reply) {
              console.log('--> request is', req.cmd)
              reply(null, {
                data: 'some data'
              })
            }

      section
        h2 Streams are a first level concern
        p
          | We can use them to receive live updates
        pre
          code.language-javascript.
            instance.request({
              cmd: 'a request',
            }, function (err, res) {
              res.streams.on('data', console.log)
            }

      section
        pre
          code.language-javascript.
            instance.request({
              cmd: 'upload',
              streams: {
                file: fs.createReadStream(__filename)
              }
            }, console.log)

      section
        h2 Streams can also be in replies
        pre
          code.language-javascript.
            function handle (req, reply) {
              console.log('--> request is', req.cmd)
              reply(null, {
                streams: {
                  file: fs.createReadStream(__filename)
                }
              })
            }

      section
        a(href="http://github.com/mcollina/bloomrun")
          img(src="./images/bloomrun.png" style="width: 90%")

      section
        h2 Pattern Matching!
        pre
          code(data-bespoke-autorun).language-javascript.
            var i = bloomrun()
            i.add({ cmd: 'save' }, function save (arg, cb) {
              alert('saving ' + JSON.stringify(arg))
              cb(null, true) })

            var msg = {
              cmd: 'save',
              person: { name: 'matteo' } }
            i.lookup(msg)(msg, function (err, result) {
              alert([err, result].join(' ')) })

      section
        h3 Upring is a framework to&nbsp;
          b build

        ul.bullet
          li a key value store
          li a cache
          li a pub/sub system
          li real-time applications
          li a discovery system
          li a metadata store for microservices
          li ..or anything that requires distributed state!

      section
        h2 Links
        ul.bullet
          li
            a(href="https://github.com/mcollina/upring").
              https://github.com/mcollina/upring
          li
            a(href="https://github.com/mcollina/upring-kv").
              https://github.com/mcollina/upring-kv
          li
            a(href="https://github.com/mcollina/upring-control").
              https://github.com/mcollina/upring-control
          li
            a(href="https://github.com/mcollina/upring-pubsub").
              https://github.com/mcollina/upring-pubsub


      // section
      //   h2 This presentation
      //   ul.bullet
      //     li
      //       a(href="https://mcollina.github.io/scaling-state").
      //         https://mcollina.github.io/scaling-state
      //     li
      //       a(href="https://github.com/mcollina/scaling-state").
      //         https://github.com/mcollina/scaling-state

      section
        img(src='images/matteo.png' style="width: 95%")
        h3
          a(href='http://github.com/mcollina') http://github.com/mcollina

      section
        h1 Thanks!
        a(href="http://nearform.com" style="width: 20%")
          img(src="./images/nearform.svg")
        br
        h3 <a href="mailto:matteo.collina@nearform.com">matteo.collina@nearform.com</a>
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a>
        h3 <a href="http://www.nearform.com">www.nearform.com</a>

    script(src='build/build.js')
