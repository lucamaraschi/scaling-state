doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Scaling State

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section(data-bespoke-backdrop='black').trans
        div(style='text-align: left; margin-top: -2em; color: white')
          h1 Scaling State
          h3(style='color: white') by&nbsp;
            a(style="display:inline-block;margin-left: -.03em; color: white",href="http://twitter.com/matteocollina") @matteocollina

          br
          div(style="width: 50%; float: right; margin-bottom: -30em;")
            a(href="http://nearform.com")
              img(src="./images/nearform.svg")

      section(data-bespoke-backdrop='node-desktop').trans

      section
        h2 MVC Architecture
        img(src='images/arch-mvc.png' style='height: 90%')

      section(data-bespoke-backdrop='monolith').trans

      section()
        h2 Modules Architecture
        img(src='images/arch-modules.png' style='width: 90%')

      section()
        h2 Services Architecture
        img(src='images/arch-services.png' style='height: 90%')

      section(data-bespoke-backdrop='stonehenge').trans

      section()
        h2 Microservices Architecture
        img(src='images/arch-microservices.png' style='width: 90%')

      section()
        h2 Microservices Characteristics
        ul.bullet
          li small in size
          li communicate by messages
          li bounded by contexts
          li autonomously developed
          li independently deployable
          li decentralized

      section()
        h2 Microservices are stateless

      section()
        // h2 Stateless Architecture
        img(src='images/arch-generic.png' style='height: 90%')

      section
        h2 Lifecyle
        ol
          li the load balancer receives request
          li the load balancer routes the request to
            br
            b the least loaded server
          li the first server calls several microservices..
          li ideally load balancing so that the load is spread
          li each of them fetch some data from a database
          li each of them return the given data

      section()
        img(src='images/loadbalacing.png' style='width: 90%')

      section
        h3 Every microservice must load the data
        h2 Any local caching is unfeasible
          br
          | as the load is shared

      section
        img(src="./images/no-caching.png", style="width: 90%")

      section
        img(src="./images/kaboom.gif")

      section()
        h2(style="text-decoration: line-through;") Microservices are stateless

      section(data-bespoke-backdrop='lamp').trans
        h1(style="color: white; margin-left: -10%; margin-right: auto; width: 10%; text-align: left; padding-bottom: 5%")
          | Idea

      section(data-bespoke-backdrop='lamp').trans
        h2(style="color: white; margin-left: auto; margin-right: 0%; width: 30%; text-align: right; padding-bottom: 5%")
          | Let's write <u><i>stateful</i></u> services!

      section
        h2 How do we know where the state lives?
        h3 Load balancing with round-robin works&nbsp;
          b against&nbsp;
          | us

      section
        h2 Given a request referencing data X, we must always route it to peer Y.

      section
        img(src="./images/reqhashing.png" style="width: 90%")

      section
        img(src="./images/reqhashing-with-gateway.png" style="width: 90%")

      section
        h2 How do we assign
          br
          |users to servers?

      section
        h2 Application-level Sharding
        img(src='images/sharding.png' style='height: 90%')

      section
        h2 What if the topology changes?

      section
        h2
          br
          |Every peer must know every other peer:
          br
          | n * (n - 1) connections

      section
        h2 Failure detection
        img(src="./images/heartbeat.png" style="width: 90%")
        h2 by heartbeat

      section
        h2 Every peer receives
          br
          | n - 1 heartbeats in any interval

      section
        img(src="./images/unfeasible.gif")

      section
        h2 Seems unfeasible. Or not?

      section(data-bespoke-backdrop='dragon-scroll').trans
        h1(style="color: white; padding-top: 50%") Secret Sauce(s)

      section()
        img(src='images/dynamodb.png' style='width: 90%')

      section
        img(src="./images/dynamo-strategy-one.png" style="height: 90%")

      section()
        img(src='images/swim.png' style='width: 90%')

      section
        ul(style='text-align: left; font-size: 3em').bullet
          li
            b(style='color: red; font-style: italic;') S
            | calable
          li
            b(style='color: red; font-style: italic;') W
            | eakly-Consistent
          li
            b(style='color: red; font-style: italic;') I
            | nfection Style
          li
            b(style='color: red; font-style: italic;') M
            | embership protocol

      section(data-bespoke-backdrop='lamp').trans
        h1(style="color: white; margin-left: -10%; margin-right: auto; width: 10%; text-align: left; padding-bottom: 5%")
          | Idea

      section(data-bespoke-backdrop='lamp').trans
        h3(style="color: white; margin-left: auto; margin-right: 0%; width: 30%; text-align: right; padding-bottom: 5%")
          | Let's organize our peers in a <b>consistent hashring</b>,
          | using <b>SWIM</b> to detect failures

      section(data-bespoke-backdrop='magic').trans

      section()
        img(src='images/upring.svg' style='width: 90%')

      section()
        img(src='images/hashring-sharding.png' style='height: 90%')

      section
        img(src='images/control.png' style='height: 90%')

      section
        h2 DEMO

      section
        h3
          b UpRing&nbsp;
          |is a building block for&nbsp;
          b distributed systems

      section
        h3
          b UpRing&nbsp;
          |is a building block for&nbsp;
          b infrastructure

      section
        h3 Upring is a framework to&nbsp;
          b build

        ul.bullet
          li a key value store
          li a cache
          li a pub/sub system
          li real-time applications
          li a discovery system
          li a metadata store for microservices
          li ..or anything that requires distributed state!

      section(data-bespoke-backdrop='magic').trans

      section
        h2 Links
        ul.bullet
          li
            a(href="https://github.com/mcollina/upring").
              https://github.com/mcollina/upring
          li
            a(href="https://github.com/mcollina/upring-kv").
              https://github.com/mcollina/upring-kv
          li
            a(href="https://github.com/mcollina/upring-control").
              https://github.com/mcollina/upring-control
          li
            a(href="https://github.com/mcollina/upring-pubsub").
              https://github.com/mcollina/upring-pubsub

      section
        img(src="./images/penguins.gif")

      section
        img(src='images/upring.svg' style='width: 30%')
        br
        br
        h2 How to build a framework for building infrastructure components?

      section(data-bespoke-backdrop='kay').transwhite
        br
        br
        br
        p
          i.fa.fa-quote-left &nbsp;
          | The key in making great and growable systems is much more
          | to design how its modules communicate rather than what
          | their internal properties and behaviors should be.
          i.fa.fa-quote-right &nbsp;
          | - Alan Key, father of OOP
        .copyright
          | Image by Marcin Wichary&nbsp;
          a(href="http://creativecommons.org/licenses/by/3.0/deed.en_US")
            img(src="images/cc_attribution.png")

      section
        h2 What is a message?
        ul.bullet
          li Maps
          li Arrays
          li Strings
          li Numbers
          li Binary data?
          li Streams of data?

      section
        h2 The anatomy of a message
        pre
          code.language-javascript.
            {
              person:  {
                name: 'Matteo'
                surname: 'Collina'
              }
            }

      section
        h2 The anatomy of a recipient
        pre
          code.language-javascript.
            recipient(message, function (err, result) {
              console.log(err, result)
            })

        ul.bullet
          li result is another message

      section
        h2 Node Callback Style
        ul.bullet
          li async by default
          li no difference if wrapping a db, or a remote endpoint
          li Promises are ok as well :)

      section
        h2 How to remote a function call?
        ul.bullet
          li how do we encode which function to call?
          li truly multi transport from day zero
          li we can store it in the message!

      section
        h2 Final message
        pre
          code.language-javascript.
            {
              role: 'person',
              cmd: 'save'
              person:  {
                name: 'Matteo'
                surname: 'Collina'
              }
            }

      section
        a(href="http://github.com/mcollina/bloomrun")
          img(src="./images/bloomrun.png" style="width: 90%")

      section
        h2 Pattern Matching!
        pre
          code(data-bespoke-autorun).language-javascript.
            var i = bloomrun()
            i.add({ cmd: 'save' }, function save (arg, cb) {
              alert('saving ' + JSON.stringify(arg))
              cb(null, true) })

            var msg = {
              cmd: 'save',
              person: { name: 'matteo' } }
            i.lookup(msg)(msg, function (err, result) {
              alert([err, result].join(' ')) })

      section
        h2 Transport: tentacoli
        ul.bullet
          li
            a(href="https://github.com/mcollina/tentacoli")
              | https://github.com/mcollina/tentacoli
          li request/response for messages
          li support sending binary streams
          li support sending object streams
          li works on top any binary stream

      section
        pre
          code.language-javascript.
            var stream = net.connect(4200)
            var instance = tentacoli()

            stream.pipe(instance).pipe(stream)

            instance.request({
              cmd: 'somedata'
            }, function (err, res) {
              console.log(err, res)
            })

      section
        pre
          code.language-javascript.
            var server = net.createServer(function (stream) {
              var instance = tentacoli()
              stream.pipe(instance).pipe(stream)
              stream.on('request', handle)
            })
            server.listen(4200)

      section
        pre
          code.language-javascript.
            function handle (req, reply) {
              console.log('--> request is', req.cmd)
              reply(null, {
                data: 'some data'
              })
            }

      section
        h2 Streams are a first level concern
        p
          | We can use them to receive live updates
        pre
          code.language-javascript.
            instance.request({
              cmd: 'a request',
            }, function (err, res) {
              res.streams.on('data', console.log)
            }

      section
        pre
          code.language-javascript.
            instance.request({
              cmd: 'upload',
              streams: {
                file: fs.createReadStream(__filename)
              }
            }, console.log)

      section
        h2 Streams can also be in replies
        pre
          code.language-javascript.
            function handle (req, reply) {
              console.log('--> request is', req.cmd)
              reply(null, {
                streams: {
                  file: fs.createReadStream(__filename)
                }
              })
            }

      section()
        img(src='images/upring.svg' style='width: 90%')

      section
        h2 API
        ul.bullet
          li starting upring
          li add some patterns
          li send requests
          li do live updates
          li events
          li track and replica

      section
        h2 Starting upring
        pre
          code.language-javascript.
            const upring = UpRing({
              base: ['127.0.0.1:7979'],
              logLevel: 'debug',
              hashring: {
                replicaPoints: 10,
                joinTimeout: 200
              }
            })

      section
        h2 Adding patterns 1/2
        pre
          code.language-javascript.
            upring.add('ns:kv,cmd:put', function (req, reply) {
              db.set(req.key, req.value)
              /* the first argument is the error
                 the second one is the result */
              reply(null, { ok: true })
            })

      section
        h2 Send requests
        pre
          code.language-javascript.
            upring.request({
              ns: 'kv',
              cmd: 'get',
              key: 'hello'
            }, console.log)

      section
        h2 Do live updates 1/2
        pre
          code.language-javascript.
            upring.add('ns:kv,cmd:live', function (req, reply) {
              const updates = new Readable({
                objectMode: true,
                read: () => {}
              })
              // call push whenever you want to send data
              // se the full Readable API at nodejs.org
              updates.push({ hello: 'world' })
              reply(null, { streams: { updates } })
            })

      section
        h2 Do live updates 2/2
        pre
          code.language-javascript.
            upring.request({
              ns: 'kv',
              cmd: 'get',
              key: 'hello'
            }, function (err, res) {
              res.streams.updates.on('data', console.log)
            })

      section
        h2 Adding patterns 2/2
        pre
          code.language-javascript.
            upring.add('ns:kv,cmd:get', function (req, reply) {
              /* the first argument is the error
                 the second one is the result */
              reply(null, { value: db.get(req.key) })
            })

      section(data-bespoke-backdrop='upring-events').trans

      section
        h2 Track
        pre
          code.language-javascript.
            /* call upring.track(key) if you are responsible
               for that key, i.e. if upring.allocatedToMe(key)
               returns true */
            const tracker = upring.track(key, { replica: true })
            tracker.on('replica', function (peer) {
              console.log('new replica', peer)
            })
            tracker.on('move', function (peer) {
              console.log('moved to', peer)
            })

      section
        h2 Replica
        pre
          code.language-javascript.
            /* call upring.replica(key, cb) if you are not responsible
               for that key, i.e. if upring.allocatedToMe(key)
               returns false */
            upring.replica(key, function () {
              // now upring.allocateToMe(key) returns true
            })

      section
        h3 UpRing helps you&nbsp;
        h2 Scaling State

      section
        h2 This presentation
        ul.bullet
          li
            a(href="https://mcollina.github.io/scaling-state").
              https://mcollina.github.io/scaling-state
          li
            a(href="https://github.com/mcollina/scaling-state").
              https://github.com/mcollina/scaling-state

      section
        img(src='images/matteo.png' style="width: 95%")
        h3
          a(href='http://github.com/mcollina') http://github.com/mcollina

      section
        h1 Thanks!
        a(href="http://nearform.com" style="width: 20%")
          img(src="./images/nearform.svg")
        br
        h3 <a href="mailto:matteo.collina@nearform.com">matteo.collina@nearform.com</a>
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a>
        h3 <a href="http://www.nearform.com">www.nearform.com</a>

    script(src='build/build.js')
